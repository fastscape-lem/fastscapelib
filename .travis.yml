language: cpp
notifications:
  email: false
branches:
  only:
    - master
dist: trusty

matrix:
  fast_finish: true
  include:
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9
      env: COMPILER=gcc GCC=4.9
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env: COMPILER=gcc GCC=5
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
      env: COMPILER=gcc GCC=6
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      env: COMPILER=gcc GCC=7 XTENSOR=dev
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-3.9
          packages:
            - clang-3.9
            - libstdc++-6-dev  # need newer libstdc++ for C++14 support
      env: COMPILER=clang CLANG=3.9
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-4.0
          packages:
            - clang-4.0
            - libstdc++-6-dev
      env: COMPILER=clang CLANG=4.0
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0
          packages:
            - clang-5.0
            - libstdc++-6-dev
      env: COMPILER=clang CLANG=5.0
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-6.0
          packages:
            - clang-6.0
            - libstdc++-6-dev
      env: COMPILER=clang CLANG=6.0
    - os: osx
      osx_image: xcode8
      compiler: clang
    - os: osx
      osx_image: xcode9
      compiler: clang
    - os: osx
      osx_image: xcode6.4
      compiler: clang
      env: PYTEST=3.6
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      language: python
      env: PYTEST=2.7 COMPILER=gcc GCC=7
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
      language: python
      env: PYTEST=3.6 COMPILER=gcc GCC=8
    - python: 3.5
      language: python
      env: DOCS=yes
  allow_failures:
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      env: COMPILER=gcc GCC=7 XTENSOR=dev
    - os: osx
      osx_image: xcode6.4
      compiler: clang
      env: PYTEST=3.6

env:
  global:
    - MINICONDA_VERSION="latest"
    - MINICONDA_LINUX="Linux-x86_64"
    - MINICONDA_OSX="MacOSX-x86_64"

before_install:
  # Configure build variables
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      if [[ "$COMPILER" == "gcc" ]]; then
        export CXX=g++-$GCC CC=gcc-$GCC;
      fi
      if [[ "$COMPILER" == "clang" ]]; then
        export CXX=clang++-$CLANG CC=clang-$CLANG;
      fi
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      export CXX=clang++ CC=clang;
    fi
  # Install miniconda / update conda
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      MINICONDA_OS=$MINICONDA_LINUX;
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      MINICONDA_OS=$MINICONDA_OSX;
    fi
  - wget "http://repo.continuum.io/miniconda/Miniconda3-$MINICONDA_VERSION-$MINICONDA_OS.sh" -O miniconda.sh;
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a

install:
  # Create conda environment
  - if [[ "$DOCS" == "yes" ]]; then
      conda env create -n test_env --file doc/environment.yml;
      conda install -n test_env doxygen sphinx_rtd_theme -c conda-forge;
    elif [[ "$PYTEST" == "2.7" ]]; then
      conda create -n test_env python=2.7 pip numpy cmake xtensor-python pytest -c conda-forge;
    elif [[ "$PYTEST" == "3.6" ]]; then
      conda create -n test_env python=3.6 pip numpy cmake xtensor-python pytest -c conda-forge;
    else
      conda create -n test_env gtest cmake xtensor -c conda-forge;
    fi
  - source activate test_env
  - conda list
  # Maybe build tests or build/install Python bindings
  - |
    if [[ "$DOCS" == "yes" ]]; then
      cd doc;
    elif [[ "$PYTEST" == "2.7" || "$PYTEST" == "3.6" ]]; then
      cd python;
      pip install -e . -v;
    else
      mkdir build;
      cd build;
      if [[ "$XTENSOR" == "dev" ]]; then
        cmake -DBUILD_TESTS=ON -DDOWNLOAD_XTENSOR=ON ..;
      else
        cmake -DBUILD_TESTS=ON ..;
      fi
      make -j2 test_fastscapelib;
      cd test;
    fi

script:
  # Build docs or run tests
  - if [[ "$DOCS" == "yes" ]]; then
      doxygen;
      sphinx-build -n -j auto -b html -d _build/doctrees source _build/html;
    elif [[ "$PYTEST" == "2.7" || "$PYTEST" == "3.6" ]]; then
      pytest -vv fastscapelib;
    else
      ./test_fastscapelib;
    fi
